--creating respective tables on snowflake
create or replace TABLE THE_SKY.SKY_DATA.COUNTRIES (
	COUNTRY_CODE VARCHAR(30) NOT NULL,
	NAME VARCHAR(225),
	CONTINENT VARCHAR(30),
	WIKIPEDIA_LINK VARCHAR(225),
	KEYWORDS VARCHAR(225),
	primary key (COUNTRY_CODE)
);

create or replace TABLE THE_SKY.SKY_DATA.REGIONS (
	REGION_CODE VARCHAR(30) NOT NULL,
	LOCAL_CODE VARCHAR(30),
	NAME VARCHAR(225),
	CONTINENT VARCHAR(30),
	ISO_COUNTRY VARCHAR(30),
	WIKIPEDIA_LINK VARCHAR(225),
	KEYWORDS VARCHAR(225),
	primary key (REGION_CODE),
	foreign key (ISO_COUNTRY) references THE_SKY.SKY_DATA.COUNTRIES(COUNTRY_CODE)
);

create or replace TABLE THE_SKY.SKY_DATA.AIRPORTS (
	AIRPORT_ID NUMBER(38,0) NOT NULL,
	IDENT VARCHAR(30) UNIQUE,
	TYPE VARCHAR(30),
	NAME VARCHAR(225),
	LATITUDE_DEG FLOAT,
	LONGITUDE_DEG FLOAT,
	ELEVATION_FT NUMBER(38,0),
	CONTINENT VARCHAR(30),
	ISO_COUNTRY VARCHAR(30),
	ISO_REGION VARCHAR(30),
	MUNICIPALITY VARCHAR(225),
	SCHEDULED_SERVICE BOOLEAN,
	GPS_CODE VARCHAR(30),
	IATA_CODE VARCHAR(30),
	LOCAL_CODE VARCHAR(30),
	HOME_LINK VARCHAR(225),
	WIKIPEDIA_LINK VARCHAR(225),
	KEYWORDS VARCHAR(1000),
	primary key (AIRPORT_ID),
	foreign key (ISO_COUNTRY) references THE_SKY.SKY_DATA.COUNTRIES(COUNTRY_CODE),
	foreign key (ISO_REGION) references THE_SKY.SKY_DATA.REGIONS(REGION_CODE)
);


create or replace TABLE THE_SKY.SKY_DATA.AIRPORT_FREQUENCIES (
	FREQUENCIES_ID NUMBER(38,0) NOT NULL,
	AIRPORT_REF NUMBER(38,0),
	AIRPORT_IDENT VARCHAR(30),
	TYPE VARCHAR(30),
	DESCRIPTION VARCHAR(225),
	FREQUENCY_MHZ NUMBER(38,0),
	primary key (FREQUENCIES_ID),
    foreign key (AIRPORT_REF) references THE_SKY.SKY_DATA.AIRPORTS(AIRPORT_ID)
);


create or replace TABLE THE_SKY.SKY_DATA.NAVAIDS (
	NAVAIDS_ID INTEGER NOT NULL,
	FILENAME VARCHAR(60),
	IDENT VARCHAR(30),
	NAME VARCHAR(60),
	TYPE VARCHAR(30),
	FREQUENCY_KHZ INTEGER,
	LATITUDE_DEG FLOAT,
	LONGITUDE_DEG FLOAT,
	ELEVATION_FT INTEGER ,
	ISO_COUNTRY VARCHAR(30),
	DME_FREQUENCY_KHZ INTEGER ,
	DME_CHANNEL VARCHAR(30),
	DME_LATITUDE_DEG FLOAT,
	DME_LONGITUDE_DEG FLOAT,
	DME_ELEVATION_FT INTEGER ,
	SLAVED_VARIATION_DEG FLOAT,
	MAGNETIC_VARIATION_DEG FLOAT,
	USAGETYPE VARCHAR(30),
	POWER VARCHAR(30),
	ASSOCIATED_AIRPORT VARCHAR(30),
	primary key (NAVAIDS_ID),
	foreign key (ISO_COUNTRY) references THE_SKY.SKY_DATA.COUNTRIES(COUNTRY_CODE),
    foreign key (ASSOCIATED_AIRPORT) references THE_SKY.SKY_DATA.AIRPORTS(IDENT)
);


create or replace TABLE THE_SKY.SKY_DATA.RUNWAYS (
	RUNWAYS_ID NUMBER(38,0) NOT NULL,
	AIRPORT_REF NUMBER(38,0),
	AIRPORT_IDENT VARCHAR(30),
	LENGTH_FT NUMBER(38,0),
	WIDTH_FT NUMBER(38,0),
	SURFACE VARCHAR(1000),
	LIGHTED BOOLEAN,
	CLOSED BOOLEAN,
	LE_IDENT VARCHAR(30),
	LE_LATITUDE_DEG FLOAT,
	LE_LONGITUDE_DEG FLOAT,
	LE_ELEVATION_FT NUMBER(38,0),
	LE_HEADING_DEG NUMBER(38,0),
	LE_DISPLACED_THRESHOLD_FT NUMBER(38,0),
	HE_IDENT VARCHAR(30),
	HE_LATITUDE_DEG FLOAT,
	HE_LONGITUDE_DEG FLOAT,
	HE_ELEVATION_FT NUMBER(38,0),
	HE_HEADING_DEG NUMBER(38,0),
	HE_DISPLACED_THRESHOLD_FT NUMBER(38,0),
	primary key (RUNWAYS_ID),
    foreign key (AIRPORT_REF) references THE_SKY.SKY_DATA.AIRPORTS(AIRPORT_ID)
);

-- cleaning the tables where NA for North America was null in the continent column and NA for Namibia in the country's column
UPDATE STAGING.AIR_STAGING.COUNTRIES SET code = COALESCE(code, 'NA');
UPDATE STAGING.AIR_STAGING.COUNTRIES SET continent = COALESCE(continent, 'NA');
UPDATE STAGING.AIR_STAGING.REGIONS SET iso_country = COALESCE(iso_country, 'NA');
UPDATE STAGING.AIR_STAGING.REGIONS SET continent = COALESCE(continent, 'NA');
UPDATE STAGING.AIR_STAGING.NAVAIDS SET iso_country = COALESCE(iso_country, 'NA');
UPDATE STAGING.AIR_STAGING.AIRPORTS SET continent = COALESCE(continent, 'NA');
UPDATE STAGING.AIR_STAGING.AIRPORTS SET iso_country = COALESCE(iso_country, 'NA');


--insert into countries table
INSERT INTO THE_SKY.SKY_DATA.COUNTRIES (
    COUNTRY_CODE,
    NAME,
    CONTINENT,
    WIKIPEDIA_LINK,
    KEYWORDS
)
SELECT
    CODE,
    NAME,
    CONTINENT,
    WIKIPEDIA_LINK,
    KEYWORDS
FROM
    STAGING.AIR_STAGING.COUNTRIES
    AS source
WHERE NOT EXISTS (
    SELECT 1
    FROM THE_SKY.SKY_DATA.COUNTRIES AS target
    WHERE source.CODE = target.COUNTRY_CODE
);


--insert into regions table
INSERT INTO THE_SKY.SKY_DATA.REGIONS (
    REGION_CODE,
    LOCAL_CODE,
    NAME,
    CONTINENT,
    ISO_COUNTRY,
    WIKIPEDIA_LINK,
    KEYWORDS
)
SELECT
    CODE,
    LOCAL_CODE,
    NAME,
    CONTINENT,
    ISO_COUNTRY,
    WIKIPEDIA_LINK,
    KEYWORDS
FROM
    STAGING.AIR_STAGING.REGIONS
    AS source
WHERE NOT EXISTS (
    SELECT 1
    FROM THE_SKY.SKY_DATA.REGIONS AS target
    WHERE source.CODE = target.REGION_CODE);



--insert into airports table
INSERT INTO THE_SKY.SKY_DATA.AIRPORTS (
    AIRPORT_ID,
    IDENT,
    TYPE,
    NAME,
    LATITUDE_DEG,
    LONGITUDE_DEG,
    ELEVATION_FT,
    CONTINENT,
    ISO_COUNTRY,
    ISO_REGION,
    MUNICIPALITY,
    SCHEDULED_SERVICE,
    GPS_CODE,
    IATA_CODE,
    LOCAL_CODE,
    HOME_LINK,
    WIKIPEDIA_LINK,
    KEYWORDS
)
SELECT
    ID,
    IDENT,
    TYPE,
    NAME,
    LATITUDE_DEG,
    LONGITUDE_DEG,
    ELEVATION_FT,
    CONTINENT,
    ISO_COUNTRY,
    ISO_REGION,
    MUNICIPALITY,
    SCHEDULED_SERVICE,
    GPS_CODE,
    IATA_CODE,
    LOCAL_CODE,
    HOME_LINK,
    WIKIPEDIA_LINK,
    KEYWORDS
FROM
    STAGING.AIR_STAGING.AIRPORTS
    AS source
WHERE NOT EXISTS (
    SELECT 1
    FROM THE_SKY.SKY_DATA.AIRPORTS AS target
    WHERE source.ID = target.AIRPORT_ID);



--insert into airport_frequencies table
INSERT INTO THE_SKY.SKY_DATA.AIRPORT_FREQUENCIES (
    FREQUENCIES_ID,
    AIRPORT_REF,
    AIRPORT_IDENT,
    TYPE,
    DESCRIPTION,
    FREQUENCY_MHZ
)
SELECT
    ID,
    AIRPORT_REF,
    AIRPORT_IDENT,
    TYPE,
    DESCRIPTION,
    FREQUENCY_MHZ
FROM
    STAGING.AIR_STAGING.AIRPORT_FREQUENCIES
    AS source
WHERE NOT EXISTS (
    SELECT 1
    FROM THE_SKY.SKY_DATA.AIRPORT_FREQUENCIES AS target
    WHERE source.ID = target.FREQUENCIES_ID);



--insert into navaids table
INSERT INTO THE_SKY.SKY_DATA.NAVAIDS (
    NAVAIDS_ID,
    FILENAME,
    IDENT,
    NAME,
    TYPE,
    FREQUENCY_KHZ,
    LATITUDE_DEG,
    LONGITUDE_DEG,
    ELEVATION_FT,
    ISO_COUNTRY,
    DME_FREQUENCY_KHZ,
    DME_CHANNEL,
    DME_LATITUDE_DEG,
    DME_LONGITUDE_DEG,
    DME_ELEVATION_FT,
    SLAVED_VARIATION_DEG,
    MAGNETIC_VARIATION_DEG,
    USAGETYPE,
    POWER,
    ASSOCIATED_AIRPORT
)
SELECT
    ID,
    FILENAME,
    IDENT,
    NAME,
    TYPE,
    FREQUENCY_KHZ,
    LATITUDE_DEG,
    LONGITUDE_DEG,
    ELEVATION_FT,
    ISO_COUNTRY,
    DME_FREQUENCY_KHZ,
    DME_CHANNEL,
    DME_LATITUDE_DEG,
    DME_LONGITUDE_DEG,
    DME_ELEVATION_FT,
    SLAVED_VARIATION_DEG,
    MAGNETIC_VARIATION_DEG,
    "usageType",
    POWER,
    ASSOCIATED_AIRPORT
FROM
    STAGING.AIR_STAGING.NAVAIDS
    AS source
WHERE NOT EXISTS (
    SELECT 1
    FROM THE_SKY.SKY_DATA.NAVAIDS AS target
    WHERE source.ID = target.NAVAIDS_ID);



--insert into runways table
INSERT INTO THE_SKY.SKY_DATA.RUNWAYS (
    RUNWAYS_ID,
    AIRPORT_REF,
    AIRPORT_IDENT,
    LENGTH_FT,
    WIDTH_FT,
    SURFACE,
    LIGHTED,
    CLOSED,
    LE_IDENT,
    LE_LATITUDE_DEG,
    LE_LONGITUDE_DEG,
    LE_ELEVATION_FT,
    LE_HEADING_DEG,
    LE_DISPLACED_THRESHOLD_FT,
    HE_IDENT,
    HE_LATITUDE_DEG,
    HE_LONGITUDE_DEG,
    HE_ELEVATION_FT,
    HE_HEADING_DEG,
    HE_DISPLACED_THRESHOLD_FT
)
SELECT
    ID,
    AIRPORT_REF,
    AIRPORT_IDENT,
    LENGTH_FT,
    WIDTH_FT,
    SURFACE,
    LIGHTED,
    CLOSED,
    LE_IDENT,
    LE_LATITUDE_DEG,
    LE_LONGITUDE_DEG,
    LE_ELEVATION_FT,
    "le_heading_degT",
    LE_DISPLACED_THRESHOLD_FT,
    HE_IDENT,
    HE_LATITUDE_DEG,
    HE_LONGITUDE_DEG,
    HE_ELEVATION_FT,
    "he_heading_degT",
    HE_DISPLACED_THRESHOLD_FT
   FROM
    STAGING.AIR_STAGING.RUNWAYS
    AS source
WHERE NOT EXISTS (
    SELECT 1
    FROM THE_SKY.SKY_DATA.RUNWAYS AS target
    WHERE source.ID = target.RUNWAYS_ID);


--Business questions
--How many airports, heliports, and airfields are on each continent?
--How many airports, heliports, and airfields are in each country?
--What is the maximum and minimum elevation of each airport type?
--Which country has the highest number of airports(ignore types)?

--Airports per country
SELECT C.NAME AS CountryName,
       A.ISO_COUNTRY,    
       COUNT(CASE WHEN A.TYPE IN ('seaplane_base', 'medium_airport', 'large_airport') THEN 1 END) AS Airports,
       COUNT(CASE WHEN A.TYPE = 'heliport' THEN 1 END) AS Heliport,
       COUNT(CASE WHEN A.TYPE = 'small_airport' THEN 1 END) AS Airfield
FROM THE_SKY.SKY_DATA.AIRPORTS A
JOIN THE_SKY.SKY_DATA.COUNTRIES C ON A.ISO_COUNTRY = C.COUNTRY_CODE
GROUP BY C.NAME, A.ISO_COUNTRY
ORDER BY Airports DESC;



SELECT type,
       MAX(elevation_ft) AS highest_elevation,
       MIN(elevation_ft) AS lowest_elevation
FROM THE_SKY.SKY_DATA.AIRPORTS
GROUP BY type;



SELECT C.NAME AS CountryName, COUNT(A.ISO_COUNTRY) AS AirportCount
FROM THE_SKY.SKY_DATA.AIRPORTS A
JOIN THE_SKY.SKY_DATA.COUNTRIES C ON A.ISO_COUNTRY = C.COUNTRY_CODE
GROUP BY C.NAME
ORDER BY AirportCount DESC
LIMIT 10;

--views
--Airports per continent
CREATE OR REPLACE VIEW THE_SKY.SKY_DATA.airport_per_continent AS
SELECT continent,    
COUNT(CASE WHEN type IN ('seaplane_base','medium_airport', 'large_airport') THEN 1 END) AS airports,
--on the assumption that 'seaplane_base','medium_airport' and 'large_airport' are all airports
--and 'small_airport' is an airfield
COUNT(CASE WHEN type = 'heliport' THEN 1 END) AS heliport,
COUNT(CASE WHEN type = 'small_airport' THEN 1 END) AS airfield      
FROM THE_SKY.SKY_DATA.AIRPORTS
GROUP BY continent;


--Airports per country
CREATE OR REPLACE VIEW THE_SKY.SKY_DATA.airport_per_country AS
SELECT C.NAME AS CountryName,
       A.ISO_COUNTRY,    
       COUNT(CASE WHEN A.TYPE IN ('seaplane_base', 'medium_airport', 'large_airport') THEN 1 END) AS Airports,
       COUNT(CASE WHEN A.TYPE = 'heliport' THEN 1 END) AS Heliport,
       COUNT(CASE WHEN A.TYPE = 'small_airport' THEN 1 END) AS Airfield
FROM THE_SKY.SKY_DATA.AIRPORTS A
JOIN THE_SKY.SKY_DATA.COUNTRIES C ON A.ISO_COUNTRY = C.COUNTRY_CODE
GROUP BY C.NAME, A.ISO_COUNTRY
ORDER BY Airports DESC;


CREATE OR REPLACE VIEW THE_SKY.SKY_DATA.min_max_elevation_type AS
SELECT type,
       MAX(elevation_ft) AS highest_elevation,
       MIN(elevation_ft) AS lowest_elevation
FROM THE_SKY.SKY_DATA.AIRPORTS
GROUP BY type;


CREATE OR REPLACE VIEW THE_SKY.SKY_DATA.airport_count_country AS
SELECT C.NAME AS CountryName, COUNT(A.ISO_COUNTRY) AS AirportCount
FROM THE_SKY.SKY_DATA.AIRPORTS A
JOIN THE_SKY.SKY_DATA.COUNTRIES C ON A.ISO_COUNTRY = C.COUNTRY_CODE
GROUP BY C.NAME
ORDER BY AirportCount DESC
LIMIT 10;

